declare i32 @puts(i8*)
declare i8* @malloc(i32)
declare i32 @strlen(i8*)
declare i8* @strcpy(i8*, i8*)
declare i32 @sprintf(i8*, i8*, i32)
declare i32 @scanf(i8*, ...)
declare i32 @free(i8*)

@.justInt = private constant [3 x i8] c"%i\00", align 1
@.justString = private constant [3 x i8] c"%s\00", align 1

define void @printString(i8* %i) {
begin:
  %0 = call i32 @puts(i8* %i)
  ret void
}


define void @printInt(i32 %i) {
begin:
  %0 = call i8* @malloc(i32 14)
  %1 = bitcast [3 x i8]* @.justInt to i8*
  %2 = call i32 @sprintf(i8* %0, i8* %1, i32 %i)
  %3 = call i32 @puts(i8* %0)
  %4 = call i32 @free(i8* %0)
  ret void
}


define i32 @readInt() {
begin:
  %0 = call i8* @malloc(i32 14)
  %1 = bitcast [3 x i8]* @.justInt to i8*
  %2 = alloca i32
  %3 = call i32 (i8*, ...) @scanf(i8* %1, i32* %2)
  %4 = load i32, i32* %2
  %5 = call i32 @free(i8* %0)
  ret i32 %4
}


define i8* @readString() {
begin:
  %0 = call i8* @malloc(i32 80)
  %1 = bitcast [3 x i8]* @.justString to i8*
  %2 = call i32 (i8*, ...) @scanf(i8* %1, i8* %0)
  ret i8* %0
}

define i8* @concat(i8* %s1, i8* %s2) {
  %1 = call i32 @strlen(i8* %s1)
  %2 = call i32 @strlen(i8* %s2)
  %3 = add i32 %1, 1
  %4 = add i32 %3, %2
  %5 = call i8* @malloc(i32 %4)
  %6 = call i8* @strcpy(i8* %5, i8* %s1)
  %7 = call i8* @strcat(i8* %6, i8* %s2)
  ret i8* %7
}


declare i8* @strcat(i8*, i8*)
